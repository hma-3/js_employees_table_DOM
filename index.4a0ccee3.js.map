{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAgB,EAAG,EAAM,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAC5C,EAAY,EAAM,OAAO,CAAC,EAAE,CAE5B,EAAO,SAAS,aAAa,CAAC,QAG9B,EAAU,CACd,QACA,YACA,SACA,WACA,YACA,gBACD,CAGD,EAAa,OAAO,CAAC,SAAC,CAAA,CAAQ,CAA9B,EACE,IAAI,EAAa,CAAA,EAEjB,EAAO,gBAAgB,CAAC,QAAS,WAC/B,AA+HJ,CAAA,SAAmB,CAAK,CAAE,CAAW,CAAE,CAAU,EAG/C,IAAM,EAAa,AAFL,EAAG,EAAM,IAAI,EAEH,IAAI,CAAC,SAAC,CAAA,CAAM,CAApC,EACE,IAAM,EAAQ,EAAK,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAChD,EAAQ,EAAK,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,UAEtD,AAAI,EAAgB,GACX,EAAgB,GAAS,EAAgB,GAEzC,EAAM,aAAa,CAAC,EAE/B,GAMA,IAJI,GACF,EAAW,OAAO,GAGb,EAAM,UAAU,EACrB,EAAM,WAAW,CAAC,EAAM,UAAU,EAGpC,EAAW,OAAO,CAAC,SAAC,CAApB,EAA4B,OAAA,EAAM,WAAW,CAAC,E,EAChD,CAAA,EAtJc,EAAW,EAAO,GAC5B,EAAa,CAAC,CAChB,EACF,GAGA,IAAI,EAAmB,GAEvB,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAM,EAAgB,MAAM,CAAC,OAAO,CAAC,M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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tableHeaders = _to_consumable_array(table.tHead.rows[0].cells);\nvar tableBody = table.tBodies[0];\nvar body = document.querySelector(\"body\");\nvar fields = [\n    \"name\",\n    \"position\",\n    \"office\",\n    \"age\",\n    \"salary\"\n];\nvar options = [\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\n// table sorting by clicking on the title\ntableHeaders.forEach(function(header, index) {\n    var isReversed = false;\n    header.addEventListener(\"click\", function() {\n        sortTable(tableBody, index, isReversed);\n        isReversed = !isReversed;\n    });\n});\n// when user clicks on a row, it should become selected\nvar selectedRowIndex = -1;\ntable.addEventListener(\"click\", function(clickOnRowEvent) {\n    var row = clickOnRowEvent.target.closest(\"tr\");\n    if (row && row.parentNode.tagName === \"TBODY\") {\n        row.classList.toggle(\"active\");\n        if (selectedRowIndex !== -1 && selectedRowIndex !== row.rowIndex - 1) {\n            var previousRow = table.querySelector(\"tbody tr:nth-child(\".concat(selectedRowIndex + 1));\n            previousRow.classList.remove(\"active\");\n        }\n        selectedRowIndex = row.rowIndex - 1;\n    }\n});\n// form for adding new employees to the spreadsheet\nvar form = document.createElement(\"form\");\nvar saveToTableButton = document.createElement(\"button\");\nform.className = \"new-employee-form\";\nbody.appendChild(form);\nfields.forEach(function(field) {\n    var label = document.createElement(\"label\");\n    label.textContent = field[0].toLocaleUpperCase() + field.slice(1) + \": \";\n    if (field === \"office\") {\n        var select = document.createElement(\"select\");\n        select.setAttribute(\"name\", field);\n        select.dataset.qa = field;\n        select.required = true;\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var option = _step.value;\n                var opt = document.createElement(\"option\");\n                opt.value = option;\n                opt.textContent = option;\n                select.appendChild(opt);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        label.appendChild(select);\n    } else {\n        var input = document.createElement(\"input\");\n        input.setAttribute(\"name\", field);\n        input.dataset.qa = field;\n        input.required = true;\n        if (field === \"age\" || field === \"salary\") input.setAttribute(\"type\", \"number\");\n        else input.setAttribute(\"type\", \"text\");\n        label.appendChild(input);\n    }\n    form.appendChild(label);\n});\nsaveToTableButton.setAttribute(\"type\", \"submit\");\nsaveToTableButton.textContent = \"Save to table\";\nsaveToTableButton.addEventListener(\"click\", function(buttonSubmitEvent) {\n    buttonSubmitEvent.preventDefault();\n    if (validateForm(form)) {\n        addDataFromForm(form, tableBody);\n        clearForm(form, options);\n    }\n});\nform.appendChild(saveToTableButton);\n// editing of table cells by double-clicking on it\nvar cellInEdit = false;\ntable.addEventListener(\"dblclick\", function(dbclickOnCell) {\n    var cell = dbclickOnCell.target.closest(\"td\");\n    if (cell && !cellInEdit) {\n        cellInEdit = true;\n        if (!cell.dataset.initialValue) cell.dataset.initialValue = cell.textContent.trim();\n        var initialValue = cell.dataset.initialValue;\n        var input = document.createElement(\"input\");\n        input.className = \"cell-input\";\n        cell.textContent = \"\";\n        cell.appendChild(input);\n        input.onblur = function() {\n            cell.textContent = input.value.trim() || initialValue;\n            cellInEdit = false;\n        };\n        input.addEventListener(\"keypress\", function(submitChangesEvent) {\n            if (submitChangesEvent.key === \"Enter\") {\n                cell.textContent = input.value.trim() || initialValue;\n                cellInEdit = false;\n            }\n        });\n    }\n});\n// functions\nfunction convertToNumber(string) {\n    return Number(string.replace(/[^0-9]+/g, \"\"));\n}\nfunction sortTable(tbody, columnIndex, isReversed) {\n    var rows = _to_consumable_array(tbody.rows);\n    var sortedRows = rows.sort(function(row1, row2) {\n        var cell1 = row1.cells[columnIndex].textContent.trim();\n        var cell2 = row2.cells[columnIndex].textContent.trim();\n        if (convertToNumber(cell1)) return convertToNumber(cell1) - convertToNumber(cell2);\n        else return cell1.localeCompare(cell2);\n    });\n    if (isReversed) sortedRows.reverse();\n    while(tbody.firstChild)tbody.removeChild(tbody.firstChild);\n    sortedRows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n}\nfunction validateForm(currentForm) {\n    var POS_RIGHT_VALUE = 10;\n    var POS_TOP_VALUE = 10;\n    var inputs = _to_consumable_array(currentForm.querySelectorAll(\"input\"));\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var input = _step.value;\n            if (input.value === \"\") {\n                pushNotification(POS_TOP_VALUE, POS_RIGHT_VALUE, \"Error\", \"\".concat(input.getAttribute(\"name\"), \" is empty\"), \"error\");\n                return false;\n            }\n            if (input.getAttribute(\"name\") === \"name\" && input.value.length < 4) {\n                pushNotification(POS_TOP_VALUE, POS_RIGHT_VALUE, \"Error\", \"Name should have at least 4 letters\", \"error\");\n                return false;\n            }\n            if (input.getAttribute(\"name\") === \"age\" && (input.value < 18 || input.value >= 90)) {\n                pushNotification(POS_TOP_VALUE, POS_RIGHT_VALUE, \"Error\", \"Age should be between 18 and 90\", \"error\");\n                return false;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return true;\n}\nfunction pushNotification(posTop, posRight, title, description, type) {\n    var notification = document.createElement(\"div\");\n    var titleElement = document.createElement(\"h2\");\n    var descriptionElement = document.createElement(\"p\");\n    notification.className = \"notification \".concat(type);\n    notification.dataset.qa = \"notification\";\n    titleElement.className = \"title\";\n    notification.append(titleElement, descriptionElement);\n    titleElement.textContent = title;\n    descriptionElement.textContent = description;\n    notification.style.top = \"\".concat(posTop, \"px\");\n    notification.style.right = \"\".concat(posRight, \"px\");\n    document.body.append(notification);\n    setTimeout(function() {\n        notification.style.display = \"none\";\n    }, 2000);\n}\nfunction clearForm(currentForm, currentOptions) {\n    var inputs = _to_consumable_array(currentForm.querySelectorAll(\"input\"));\n    inputs.forEach(function(input) {\n        return input.value = \"\";\n    });\n    currentForm.querySelector(\"select\").value = currentOptions[0];\n}\nfunction addDataFromForm(currentForm, tbody) {\n    var newRow = document.createElement(\"tr\");\n    var nameCell = newRow.insertCell(-1);\n    var positionCell = newRow.insertCell(-1);\n    var officeCell = newRow.insertCell(-1);\n    var ageCell = newRow.insertCell(-1);\n    var salaryCell = newRow.insertCell(-1);\n    nameCell.textContent = currentForm.querySelector(\"input[name=name]\").value;\n    positionCell.textContent = currentForm.querySelector(\"input[name=position]\").value;\n    officeCell.textContent = currentForm.querySelector(\"select\").value;\n    ageCell.textContent = currentForm.querySelector(\"input[name=age]\").value;\n    salaryCell.textContent = \"$\" + Number(currentForm.querySelector(\"input[name=salary]\").value).toLocaleString(\"en-US\");\n    newRow.appendChild(nameCell);\n    newRow.appendChild(positionCell);\n    newRow.appendChild(officeCell);\n    newRow.appendChild(ageCell);\n    newRow.appendChild(salaryCell);\n    tbody.appendChild(newRow);\n}\n\n//# sourceMappingURL=index.4a0ccee3.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tableHeaders = [...table.tHead.rows[0].cells];\nconst tableBody = table.tBodies[0];\n\nconst body = document.querySelector('body');\n\nconst fields = ['name', 'position', 'office', 'age', 'salary'];\nconst options = [\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\n// table sorting by clicking on the title\ntableHeaders.forEach((header, index) => {\n  let isReversed = false;\n\n  header.addEventListener('click', () => {\n    sortTable(tableBody, index, isReversed);\n    isReversed = !isReversed;\n  });\n});\n\n// when user clicks on a row, it should become selected\nlet selectedRowIndex = -1;\n\ntable.addEventListener('click', (clickOnRowEvent) => {\n  const row = clickOnRowEvent.target.closest('tr');\n\n  if (row && row.parentNode.tagName === 'TBODY') {\n    row.classList.toggle('active');\n\n    if (selectedRowIndex !== -1 && selectedRowIndex !== row.rowIndex - 1) {\n      const previousRow = table.querySelector(\n        `tbody tr:nth-child(${selectedRowIndex + 1}`,\n      );\n\n      previousRow.classList.remove('active');\n    }\n\n    selectedRowIndex = row.rowIndex - 1;\n  }\n});\n\n// form for adding new employees to the spreadsheet\nconst form = document.createElement('form');\nconst saveToTableButton = document.createElement('button');\n\nform.className = 'new-employee-form';\nbody.appendChild(form);\n\nfields.forEach((field) => {\n  const label = document.createElement('label');\n\n  label.textContent = field[0].toLocaleUpperCase() + field.slice(1) + ': ';\n\n  if (field === 'office') {\n    const select = document.createElement('select');\n\n    select.setAttribute('name', field);\n    select.dataset.qa = field;\n    select.required = true;\n\n    for (const option of options) {\n      const opt = document.createElement('option');\n\n      opt.value = option;\n      opt.textContent = option;\n      select.appendChild(opt);\n    }\n\n    label.appendChild(select);\n  } else {\n    const input = document.createElement('input');\n\n    input.setAttribute('name', field);\n    input.dataset.qa = field;\n    input.required = true;\n\n    if (field === 'age' || field === 'salary') {\n      input.setAttribute('type', 'number');\n    } else {\n      input.setAttribute('type', 'text');\n    }\n\n    label.appendChild(input);\n  }\n\n  form.appendChild(label);\n});\n\nsaveToTableButton.setAttribute('type', 'submit');\nsaveToTableButton.textContent = 'Save to table';\n\nsaveToTableButton.addEventListener('click', (buttonSubmitEvent) => {\n  buttonSubmitEvent.preventDefault();\n\n  if (validateForm(form)) {\n    addDataFromForm(form, tableBody);\n    clearForm(form, options);\n  }\n});\n\nform.appendChild(saveToTableButton);\n\n// editing of table cells by double-clicking on it\nlet cellInEdit = false;\n\ntable.addEventListener('dblclick', (dbclickOnCell) => {\n  const cell = dbclickOnCell.target.closest('td');\n\n  if (cell && !cellInEdit) {\n    cellInEdit = true;\n\n    if (!cell.dataset.initialValue) {\n      cell.dataset.initialValue = cell.textContent.trim();\n    }\n\n    const initialValue = cell.dataset.initialValue;\n\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    cell.textContent = '';\n    cell.appendChild(input);\n\n    input.onblur = () => {\n      cell.textContent = input.value.trim() || initialValue;\n      cellInEdit = false;\n    };\n\n    input.addEventListener('keypress', (submitChangesEvent) => {\n      if (submitChangesEvent.key === 'Enter') {\n        cell.textContent = input.value.trim() || initialValue;\n        cellInEdit = false;\n      }\n    });\n  }\n});\n\n// functions\nfunction convertToNumber(string) {\n  return Number(string.replace(/[^0-9]+/g, ''));\n}\n\nfunction sortTable(tbody, columnIndex, isReversed) {\n  const rows = [...tbody.rows];\n\n  const sortedRows = rows.sort((row1, row2) => {\n    const cell1 = row1.cells[columnIndex].textContent.trim();\n    const cell2 = row2.cells[columnIndex].textContent.trim();\n\n    if (convertToNumber(cell1)) {\n      return convertToNumber(cell1) - convertToNumber(cell2);\n    } else {\n      return cell1.localeCompare(cell2);\n    }\n  });\n\n  if (isReversed) {\n    sortedRows.reverse();\n  }\n\n  while (tbody.firstChild) {\n    tbody.removeChild(tbody.firstChild);\n  }\n\n  sortedRows.forEach((row) => tbody.appendChild(row));\n}\n\nfunction validateForm(currentForm) {\n  const POS_RIGHT_VALUE = 10;\n  const POS_TOP_VALUE = 10;\n\n  const inputs = [...currentForm.querySelectorAll('input')];\n\n  for (const input of inputs) {\n    if (input.value === '') {\n      pushNotification(\n        POS_TOP_VALUE,\n        POS_RIGHT_VALUE,\n        'Error',\n        `${input.getAttribute('name')} is empty`,\n        'error',\n      );\n\n      return false;\n    }\n\n    if (input.getAttribute('name') === 'name' && input.value.length < 4) {\n      pushNotification(\n        POS_TOP_VALUE,\n        POS_RIGHT_VALUE,\n        'Error',\n        'Name should have at least 4 letters',\n        'error',\n      );\n\n      return false;\n    }\n\n    if (\n      input.getAttribute('name') === 'age' &&\n      (input.value < 18 || input.value >= 90)\n    ) {\n      pushNotification(\n        POS_TOP_VALUE,\n        POS_RIGHT_VALUE,\n        'Error',\n        'Age should be between 18 and 90',\n        'error',\n      );\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction pushNotification(posTop, posRight, title, description, type) {\n  const notification = document.createElement('div');\n  const titleElement = document.createElement('h2');\n  const descriptionElement = document.createElement('p');\n\n  notification.className = `notification ${type}`;\n  notification.dataset.qa = 'notification';\n  titleElement.className = 'title';\n\n  notification.append(titleElement, descriptionElement);\n  titleElement.textContent = title;\n  descriptionElement.textContent = description;\n\n  notification.style.top = `${posTop}px`;\n  notification.style.right = `${posRight}px`;\n\n  document.body.append(notification);\n\n  setTimeout(() => {\n    notification.style.display = 'none';\n  }, 2000);\n}\n\nfunction clearForm(currentForm, currentOptions) {\n  const inputs = [...currentForm.querySelectorAll('input')];\n\n  inputs.forEach((input) => (input.value = ''));\n\n  currentForm.querySelector('select').value = currentOptions[0];\n}\n\nfunction addDataFromForm(currentForm, tbody) {\n  const newRow = document.createElement('tr');\n  const nameCell = newRow.insertCell(-1);\n  const positionCell = newRow.insertCell(-1);\n  const officeCell = newRow.insertCell(-1);\n  const ageCell = newRow.insertCell(-1);\n  const salaryCell = newRow.insertCell(-1);\n\n  nameCell.textContent = currentForm.querySelector('input[name=name]').value;\n\n  positionCell.textContent = currentForm.querySelector(\n    'input[name=position]',\n  ).value;\n\n  officeCell.textContent = currentForm.querySelector('select').value;\n  ageCell.textContent = currentForm.querySelector('input[name=age]').value;\n\n  salaryCell.textContent =\n    '$' +\n    Number(\n      currentForm.querySelector('input[name=salary]').value,\n    ).toLocaleString('en-US');\n\n  newRow.appendChild(nameCell);\n  newRow.appendChild(positionCell);\n  newRow.appendChild(officeCell);\n  newRow.appendChild(ageCell);\n  newRow.appendChild(salaryCell);\n  tbody.appendChild(newRow);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","tableHeaders","tHead","rows","cells","tableBody","tBodies","body","options","forEach","header","index","isReversed","addEventListener","sortTable","tbody","columnIndex","sortedRows","sort","row1","row2","cell1","textContent","trim","cell2","convertToNumber","localeCompare","reverse","firstChild","removeChild","row","appendChild","selectedRowIndex","clickOnRowEvent","target","closest","parentNode","tagName","classList","toggle","rowIndex","previousRow","concat","remove","form","createElement","saveToTableButton","className","fields","field","label","toLocaleUpperCase","select","setAttribute","dataset","qa","required","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","option","value","opt","err","return","input","buttonSubmitEvent","newRow","nameCell","positionCell","officeCell","ageCell","salaryCell","preventDefault","validateForm","currentForm","inputs","querySelectorAll","pushNotification","getAttribute","insertCell","Number","toLocaleString","currentOptions","cellInEdit","string","replace","posTop","posRight","title","description","type","notification","titleElement","descriptionElement","append","style","top","right","setTimeout","display","dbclickOnCell","cell","initialValue","onblur","submitChangesEvent","key"],"version":3,"file":"index.4a0ccee3.js.map"}